import {
  ref,
  uploadBytes,
  uploadBytesResumable,
  getDownloadURL,
  deleteObject,
  UploadTaskSnapshot,
} from 'firebase/storage';
import { storage } from './config';

// Storage paths
const STORAGE_PATHS = {
  COMPONENT_PREVIEWS: 'components/previews',
  COMPONENT_THUMBNAILS: 'components/thumbnails',
  USER_AVATARS: 'users/avatars',
  COLLECTION_COVERS: 'collections/covers',
};

/**
 * Upload component preview image
 */
export const uploadComponentPreview = async (
  file: File,
  componentId: string,
  onProgress?: (progress: number) => void
): Promise<string> => {
  const fileExtension = file.name.split('.').pop();
  const fileName = `${componentId}_${Date.now()}.${fileExtension}`;
  const storageRef = ref(storage, `${STORAGE_PATHS.COMPONENT_PREVIEWS}/${fileName}`);

  if (onProgress) {
    return new Promise((resolve, reject) => {
      const uploadTask = uploadBytesResumable(storageRef, file);

      uploadTask.on(
        'state_changed',
        (snapshot: UploadTaskSnapshot) => {
          const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
          onProgress(progress);
        },
        (error) => {
          reject(error);
        },
        async () => {
          const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
          resolve(downloadURL);
        }
      );
    });
  } else {
    const snapshot = await uploadBytes(storageRef, file);
    return await getDownloadURL(snapshot.ref);
  }
};

/**
 * Upload component thumbnail image
 */
export const uploadComponentThumbnail = async (
  file: File,
  componentId: string
): Promise<string> => {
  const fileExtension = file.name.split('.').pop();
  const fileName = `${componentId}_thumb_${Date.now()}.${fileExtension}`;
  const storageRef = ref(storage, `${STORAGE_PATHS.COMPONENT_THUMBNAILS}/${fileName}`);

  const snapshot = await uploadBytes(storageRef, file);
  return await getDownloadURL(snapshot.ref);
};

/**
 * Upload user avatar
 */
export const uploadUserAvatar = async (
  file: File,
  userId: string,
  onProgress?: (progress: number) => void
): Promise<string> => {
  const fileExtension = file.name.split('.').pop();
  const fileName = `${userId}_${Date.now()}.${fileExtension}`;
  const storageRef = ref(storage, `${STORAGE_PATHS.USER_AVATARS}/${fileName}`);

  if (onProgress) {
    return new Promise((resolve, reject) => {
      const uploadTask = uploadBytesResumable(storageRef, file);

      uploadTask.on(
        'state_changed',
        (snapshot: UploadTaskSnapshot) => {
          const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
          onProgress(progress);
        },
        (error) => {
          reject(error);
        },
        async () => {
          const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
          resolve(downloadURL);
        }
      );
    });
  } else {
    const snapshot = await uploadBytes(storageRef, file);
    return await getDownloadURL(snapshot.ref);
  }
};

/**
 * Upload collection cover image
 */
export const uploadCollectionCover = async (
  file: File,
  collectionId: string
): Promise<string> => {
  const fileExtension = file.name.split('.').pop();
  const fileName = `${collectionId}_${Date.now()}.${fileExtension}`;
  const storageRef = ref(storage, `${STORAGE_PATHS.COLLECTION_COVERS}/${fileName}`);

  const snapshot = await uploadBytes(storageRef, file);
  return await getDownloadURL(snapshot.ref);
};

/**
 * Delete file from storage
 */
export const deleteFile = async (fileUrl: string): Promise<void> => {
  try {
    const fileRef = ref(storage, fileUrl);
    await deleteObject(fileRef);
  } catch (error) {
    console.error('Error deleting file:', error);
    throw error;
  }
};

/**
 * Delete component images
 */
export const deleteComponentImages = async (
  previewUrl: string,
  thumbnailUrl?: string
): Promise<void> => {
  try {
    await deleteFile(previewUrl);
    if (thumbnailUrl) {
      await deleteFile(thumbnailUrl);
    }
  } catch (error) {
    console.error('Error deleting component images:', error);
    throw error;
  }
};
